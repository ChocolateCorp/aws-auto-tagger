{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description"              : "",
    "Metadata"                 : {
        "AWS::CloudFormation::Interface" : {
            "ParameterGroups" : [
                {
                    "Label" : {
                        "default" : "Prerequisites"
                    },
                    "Parameters" : [
                        "IsCloudTrailEnabled"
                    ]
                },
                {
                  "Label" : {
                      "default" : "Configuration"
                  },
                  "Parameters" : [
                    "emailSuffix",
                    "emailTagName"
                  ]
                }
            ],
            "ParameterLabels" : {
                "IsCloudTrailEnabled" : {
                    "default" : "Is CloudTrail already enabled in this region? CloudTrail is a requirement for Cloudwatch Events. If not enabled, please enable CloudTrail before proceeding."
                },
                "emailSuffix": {
                  "default" : "Email Address suffix"
                },
                "emailTagName" : {
                  "default" : "Name to use for email address resource tag"
                }
            }
        }
    },
    "Parameters"               : {
        "IsCloudTrailEnabled" : {
            "Description" : "Specify if CloudTrail is enabled in the current region",
            "Type"        : "String",
            "Default"     : "Yes",
            "AllowedValues" : [
                "Yes",
                "No"
            ]
        },
        "emailSuffix" : {
            "Description" : "Email address suffix to append to the username",
            "Type"        : "String",
            "Default"     : "@signiant.com"
        },
        "emailTagName" :{
          "Description" : "Tag name to use for email address on resources",
          "Type"        : "String",
          "Default"     : "signiant:email"
        }
    },
    "Conditions"               : {
        "CreateResources" : {
            "Fn::Equals" : [
                {
                    "Ref" : "IsCloudTrailEnabled"
                },
                "Yes"
            ]
        }
    },
    "Resources"                : {
        "EC2EventRule" : {
            "Type" : "AWS::Events::Rule",
            "Condition" : "CreateResources",
            "Properties" : {
                "Description" : "Trigger a Lambda function anytime a new EC2 resource is created (EC2 instance, EBS volume, EBS Snapshot or AMI)",
                "EventPattern" : {
                    "detail-type" : [
                        "AWS API Call via CloudTrail"
                    ],
                    "detail"      : {
                        "eventSource" : [
                            "ec2.amazonaws.com"
                        ],
                        "eventName"   : [
                            "CreateVolume",
                            "RunInstances",
                            "CreateImage",
                            "CreateSnapshot"
                        ]
                    }
                },
                "Name"         : "New-EC2Resource-Event",
                "State"        : "ENABLED",
                "Targets"      : [
                    {
                        "Arn" : {
                            "Fn::GetAtt": [
                                "CFAutoTag",
                                "Arn"
                            ]
                        },
                        "Id"  : "AutoTagEC2Function"
                    }
                ]
            }
        },
        "CFAutoTag"    : {
            "Type" : "AWS::Lambda::Function",
            "Condition" : "CreateResources",
            "Properties" : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "",
                            [
                                "from __future__ import print_function\n",
                                "import json\n",
                                "import boto3\n",
                                "import logging\n",
                                "import time\n",
                                "import datetime\n",
                                "\n",
                                "logger = logging.getLogger()\n",
                                "logger.setLevel(logging.INFO)\n",
                                "\n",
                                "def lambda_handler(event, context):\n",
                                "    #logger.info('Event: ' + str(event))\n",
                                "    #print('Received event: ' + json.dumps(event, indent=2))\n",
                                "\n",
                                "    ids = []\n",
                                "\n",
                                "    try:\n",
                                "        region = event['region']\n",
                                "        detail = event['detail']\n",
                                "        eventname = detail['eventName']\n",
                                "        arn = detail['userIdentity']['arn']\n",
                                "        principal = detail['userIdentity']['principalId']\n",
                                "        userType = detail['userIdentity']['type']\n",
                                "\n",
                                "        if userType == 'IAMUser':\n",
                                "            user = detail['userIdentity']['userName']\n",
                                "        else:\n",
                                "            user = principal.split(':')[1]\n",
                                "\n",
                                "        emailSuffix = '", { "Ref" : "emailSuffix" } , "'\n",
                                "        emailTagName = '", { "Ref" : "emailTagName" } , "'\n",
                                "\n",
                                "        if '@' in user:\n",
                                "          emailAddr = user\n",
                                "        else:\n",
                                "         emailAddr = user + emailSuffix\n",
                                "\n",
                                "        logger.info('principalId: ' + str(principal))\n",
                                "        logger.info('region: ' + str(region))\n",
                                "        logger.info('eventName: ' + str(eventname))\n",
                                "        logger.info('detail: ' + str(detail))\n",
                                "        logger.info('emailAddr: ' + str(emailAddr))\n",
                                "\n",
                                "        if not detail['responseElements']:\n",
                                "            logger.warning('Not responseElements found')\n",
                                "            if detail['errorCode']:\n",
                                "                logger.error('errorCode: ' + detail['errorCode'])\n",
                                "            if detail['errorMessage']:\n",
                                "                logger.error('errorMessage: ' + detail['errorMessage'])\n",
                                "            return False\n",
                                "\n",
                                "        ec2 = boto3.resource('ec2')\n",
                                "\n",
                                "        if eventname == 'CreateVolume':\n",
                                "            ids.append(detail['responseElements']['volumeId'])\n",
                                "            logger.info(ids)\n",
                                "\n",
                                "        elif eventname == 'RunInstances':\n",
                                "            items = detail['responseElements']['instancesSet']['items']\n",
                                "            for item in items:\n",
                                "                ids.append(item['instanceId'])\n",
                                "            logger.info(ids)\n",
                                "            logger.info('number of instances: ' + str(len(ids)))\n",
                                "\n",
                                "            base = ec2.instances.filter(InstanceIds=ids)\n",
                                "\n",
                                "            #loop through the instances\n",
                                "            for instance in base:\n",
                                "                for vol in instance.volumes.all():\n",
                                "                    ids.append(vol.id)\n",
                                "                for eni in instance.network_interfaces:\n",
                                "                    ids.append(eni.id)\n",
                                "\n",
                                "        elif eventname == 'CreateImage':\n",
                                "            ids.append(detail['responseElements']['imageId'])\n",
                                "            logger.info(ids)\n",
                                "\n",
                                "        elif eventname == 'CreateSnapshot':\n",
                                "            ids.append(detail['responseElements']['snapshotId'])\n",
                                "            logger.info(ids)\n",
                                "        else:\n",
                                "            logger.warning('Not supported action')\n",
                                "\n",
                                "        if ids:\n",
                                "            for resourceid in ids:\n",
                                "                print('Tagging resource ' + resourceid)\n",
                                "            ec2.create_tags(Resources=ids, Tags=[{'Key': emailTagName, 'Value': emailAddr}, {'Key': 'Owner', 'Value': user}, {'Key': 'PrincipalId', 'Value': principal}])\n",
                                "\n",
                                "        logger.info(' Remaining time (ms): ' + str(context.get_remaining_time_in_millis()) + '\\n')\n",
                                "        return True\n",
                                "    except Exception as e:\n",
                                "        logger.error('Something went wrong: ' + str(e))\n",
                                "        return False\n"
                            ]
                        ]
                    }
                },
                "Description" : "This function tags EC2 Resources in response to Cloudwatch Events.",
                "Handler"     : "index.lambda_handler",
                "Role"        : {
                    "Fn::GetAtt" : [
                        "LambdaAutoTagRole",
                        "Arn"
                    ]
                },
                "Runtime"     : "python2.7",
                "Timeout"     : "60"
            }
        },
        "PermissionForEventsToInvokeLambda" : {
            "Type" : "AWS::Lambda::Permission",
            "Properties" : {
                "FunctionName" : {
                    "Fn::GetAtt": [
                        "CFAutoTag",
                        "Arn"
                    ]
                },
                "Action"       : "lambda:InvokeFunction",
                "Principal"    : "events.amazonaws.com",
                "SourceArn"    : {
                    "Fn::GetAtt" : [
                        "EC2EventRule",
                        "Arn"
                    ]
                }
            }
        },
        "LambdaAutoTagRole"                 : {
            "Type" : "AWS::IAM::Role",
            "Condition" : "CreateResources",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action"    : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies"                 : [
                    {
                        "PolicyName" : "LambdaGetLatestWindowsAmiIdPolicy",
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                    "Sid" : "Stmt1458923097000",
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "cloudtrail:LookupEvents"
                                    ],
                                    "Resource" : [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid" : "Stmt1458923121000",
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "ec2:CreateTags",
                                        "ec2:Describe*",
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource" : [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    "Outputs"                  : {
    }
}
